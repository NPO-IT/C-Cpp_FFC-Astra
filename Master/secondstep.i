#line 1 "secondstep.cpp"
#line 1 "SecondStep.h"



#line 1 "DoubleBufferUshort.h"



#line 1 "./../my_lib/type.h"















typedef unsigned char  byte;
typedef unsigned short ushort;
typedef unsigned long  ulong;
typedef unsigned int   uint;

#line 5 "DoubleBufferUshort.h"
#line 1 "doublebuffer_macro.h"



 


 








 























#line 47 "doublebuffer_macro.h"

#line 6 "DoubleBufferUshort.h"













 

class DoubleBufferUshort{

    public:
		ushort& GetWriteWord(const uint& num);
        const uint size;
        ushort *write,*read;
        uint rcount,wcount;
    

        DoubleBufferUshort( ushort* const data_ptr,const uint& dsize);
        ~DoubleBufferUshort();
        
        uint Read(ushort* const data,const uint rsize);
		
		void Read(const uint& num,ushort& data);
        
        void Write(const ushort* data,const uint& wsize);
		
		void Write(const uint& num,const ushort& data);
        
        void Switch();
		
        bool IsRead();
		
        bool IsFull();

		void Reset(uint r=0,uint w=0);
		void Clear();
};
#line 5 "SecondStep.h"
#line 6 "SecondStep.h"
#line 1 "secondstep_macro.h"
#line 1 "LKF_HASH_TABLE.h"



static const byte LKF_HASH_TABLE[256][4]={
113, 113, 113, 113, 
113, 113, 113, 117, 
113, 113, 113, 115, 
113, 113, 113, 15, 
113, 113, 117, 113, 
113, 113, 117, 117, 
113, 113, 117, 115, 
113, 113, 117, 15, 
113, 113, 115, 113, 
113, 113, 115, 117, 
113, 113, 115, 115, 
113, 113, 115, 15, 
113, 113, 15, 113, 
113, 113, 15, 117, 
113, 113, 15, 115, 
113, 113, 15, 15, 
113, 117, 113, 113, 
113, 117, 113, 117, 
113, 117, 113, 115, 
113, 117, 113, 15, 
113, 117, 117, 113, 
113, 117, 117, 117, 
113, 117, 117, 115, 
113, 117, 117, 15, 
113, 117, 115, 113, 
113, 117, 115, 117, 
113, 117, 115, 115, 
113, 117, 115, 15, 
113, 117, 15, 113, 
113, 117, 15, 117, 
113, 117, 15, 115, 
113, 117, 15, 15, 
113, 115, 113, 113, 
113, 115, 113, 117, 
113, 115, 113, 115, 
113, 115, 113, 15, 
113, 115, 117, 113, 
113, 115, 117, 117, 
113, 115, 117, 115, 
113, 115, 117, 15, 
113, 115, 115, 113, 
113, 115, 115, 117, 
113, 115, 115, 115, 
113, 115, 115, 15, 
113, 115, 15, 113, 
113, 115, 15, 117, 
113, 115, 15, 115, 
113, 115, 15, 15, 
113, 15, 113, 113, 
113, 15, 113, 117, 
113, 15, 113, 115, 
113, 15, 113, 15, 
113, 15, 117, 113, 
113, 15, 117, 117, 
113, 15, 117, 115, 
113, 15, 117, 15, 
113, 15, 115, 113, 
113, 15, 115, 117, 
113, 15, 115, 115, 
113, 15, 115, 15, 
113, 15, 15, 113, 
113, 15, 15, 117, 
113, 15, 15, 115, 
113, 15, 15, 15, 
117, 113, 113, 113, 
117, 113, 113, 117, 
117, 113, 113, 115, 
117, 113, 113, 15, 
117, 113, 117, 113, 
117, 113, 117, 117, 
117, 113, 117, 115, 
117, 113, 117, 15, 
117, 113, 115, 113, 
117, 113, 115, 117, 
117, 113, 115, 115, 
117, 113, 115, 15, 
117, 113, 15, 113, 
117, 113, 15, 117, 
117, 113, 15, 115, 
117, 113, 15, 15, 
117, 117, 113, 113, 
117, 117, 113, 117, 
117, 117, 113, 115, 
117, 117, 113, 15, 
117, 117, 117, 113, 
117, 117, 117, 117, 
117, 117, 117, 115, 
117, 117, 117, 15, 
117, 117, 115, 113, 
117, 117, 115, 117, 
117, 117, 115, 115, 
117, 117, 115, 15, 
117, 117, 15, 113, 
117, 117, 15, 117, 
117, 117, 15, 115, 
117, 117, 15, 15, 
117, 115, 113, 113, 
117, 115, 113, 117, 
117, 115, 113, 115, 
117, 115, 113, 15, 
117, 115, 117, 113, 
117, 115, 117, 117, 
117, 115, 117, 115, 
117, 115, 117, 15, 
117, 115, 115, 113, 
117, 115, 115, 117, 
117, 115, 115, 115, 
117, 115, 115, 15, 
117, 115, 15, 113, 
117, 115, 15, 117, 
117, 115, 15, 115, 
117, 115, 15, 15, 
117, 15, 113, 113, 
117, 15, 113, 117, 
117, 15, 113, 115, 
117, 15, 113, 15, 
117, 15, 117, 113, 
117, 15, 117, 117, 
117, 15, 117, 115, 
117, 15, 117, 15, 
117, 15, 115, 113, 
117, 15, 115, 117, 
117, 15, 115, 115, 
117, 15, 115, 15, 
117, 15, 15, 113, 
117, 15, 15, 117, 
117, 15, 15, 115, 
117, 15, 15, 15, 
115, 113, 113, 113, 
115, 113, 113, 117, 
115, 113, 113, 115, 
115, 113, 113, 15, 
115, 113, 117, 113, 
115, 113, 117, 117, 
115, 113, 117, 115, 
115, 113, 117, 15, 
115, 113, 115, 113, 
115, 113, 115, 117, 
115, 113, 115, 115, 
115, 113, 115, 15, 
115, 113, 15, 113, 
115, 113, 15, 117, 
115, 113, 15, 115, 
115, 113, 15, 15, 
115, 117, 113, 113, 
115, 117, 113, 117, 
115, 117, 113, 115, 
115, 117, 113, 15, 
115, 117, 117, 113, 
115, 117, 117, 117, 
115, 117, 117, 115, 
115, 117, 117, 15, 
115, 117, 115, 113, 
115, 117, 115, 117, 
115, 117, 115, 115, 
115, 117, 115, 15, 
115, 117, 15, 113, 
115, 117, 15, 117, 
115, 117, 15, 115, 
115, 117, 15, 15, 
115, 115, 113, 113, 
115, 115, 113, 117, 
115, 115, 113, 115, 
115, 115, 113, 15, 
115, 115, 117, 113, 
115, 115, 117, 117, 
115, 115, 117, 115, 
115, 115, 117, 15, 
115, 115, 115, 113, 
115, 115, 115, 117, 
115, 115, 115, 115, 
115, 115, 115, 15, 
115, 115, 15, 113, 
115, 115, 15, 117, 
115, 115, 15, 115, 
115, 115, 15, 15, 
115, 15, 113, 113, 
115, 15, 113, 117, 
115, 15, 113, 115, 
115, 15, 113, 15, 
115, 15, 117, 113, 
115, 15, 117, 117, 
115, 15, 117, 115, 
115, 15, 117, 15, 
115, 15, 115, 113, 
115, 15, 115, 117, 
115, 15, 115, 115, 
115, 15, 115, 15, 
115, 15, 15, 113, 
115, 15, 15, 117, 
115, 15, 15, 115, 
115, 15, 15, 15, 
15, 113, 113, 113, 
15, 113, 113, 117, 
15, 113, 113, 115, 
15, 113, 113, 15, 
15, 113, 117, 113, 
15, 113, 117, 117, 
15, 113, 117, 115, 
15, 113, 117, 15, 
15, 113, 115, 113, 
15, 113, 115, 117, 
15, 113, 115, 115, 
15, 113, 115, 15, 
15, 113, 15, 113, 
15, 113, 15, 117, 
15, 113, 15, 115, 
15, 113, 15, 15, 
15, 117, 113, 113, 
15, 117, 113, 117, 
15, 117, 113, 115, 
15, 117, 113, 15, 
15, 117, 117, 113, 
15, 117, 117, 117, 
15, 117, 117, 115, 
15, 117, 117, 15, 
15, 117, 115, 113, 
15, 117, 115, 117, 
15, 117, 115, 115, 
15, 117, 115, 15, 
15, 117, 15, 113, 
15, 117, 15, 117, 
15, 117, 15, 115, 
15, 117, 15, 15, 
15, 115, 113, 113, 
15, 115, 113, 117, 
15, 115, 113, 115, 
15, 115, 113, 15, 
15, 115, 117, 113, 
15, 115, 117, 117, 
15, 115, 117, 115, 
15, 115, 117, 15, 
15, 115, 115, 113, 
15, 115, 115, 117, 
15, 115, 115, 115, 
15, 115, 115, 15, 
15, 115, 15, 113, 
15, 115, 15, 117, 
15, 115, 15, 115, 
15, 115, 15, 15, 
15, 15, 113, 113, 
15, 15, 113, 117, 
15, 15, 113, 115, 
15, 15, 113, 15, 
15, 15, 117, 113, 
15, 15, 117, 117, 
15, 15, 117, 115, 
15, 15, 117, 15, 
15, 15, 115, 113, 
15, 15, 115, 117, 
15, 15, 115, 115, 
15, 15, 115, 15, 
15, 15, 15, 113, 
15, 15, 15, 117, 
15, 15, 15, 115, 
15, 15, 15, 15
};



static const byte BDC_HASH_TABLE[256][4]={
113, 113, 113, 113, 
113, 113, 113, 115, 
113, 113, 113, 117, 
113, 113, 113, 15, 
113, 113, 115, 113, 
113, 113, 115, 115, 
113, 113, 115, 117, 
113, 113, 115, 15, 
113, 113, 117, 113, 
113, 113, 117, 115, 
113, 113, 117, 117, 
113, 113, 117, 15, 
113, 113, 15, 113, 
113, 113, 15, 115, 
113, 113, 15, 117, 
113, 113, 15, 15, 
113, 115, 113, 113, 
113, 115, 113, 115, 
113, 115, 113, 117, 
113, 115, 113, 15, 
113, 115, 115, 113, 
113, 115, 115, 115, 
113, 115, 115, 117, 
113, 115, 115, 15, 
113, 115, 117, 113, 
113, 115, 117, 115, 
113, 115, 117, 117, 
113, 115, 117, 15, 
113, 115, 15, 113, 
113, 115, 15, 115, 
113, 115, 15, 117, 
113, 115, 15, 15, 
113, 117, 113, 113, 
113, 117, 113, 115, 
113, 117, 113, 117, 
113, 117, 113, 15, 
113, 117, 115, 113, 
113, 117, 115, 115, 
113, 117, 115, 117, 
113, 117, 115, 15, 
113, 117, 117, 113, 
113, 117, 117, 115, 
113, 117, 117, 117, 
113, 117, 117, 15, 
113, 117, 15, 113, 
113, 117, 15, 115, 
113, 117, 15, 117, 
113, 117, 15, 15, 
113, 15, 113, 113, 
113, 15, 113, 115, 
113, 15, 113, 117, 
113, 15, 113, 15, 
113, 15, 115, 113, 
113, 15, 115, 115, 
113, 15, 115, 117, 
113, 15, 115, 15, 
113, 15, 117, 113, 
113, 15, 117, 115, 
113, 15, 117, 117, 
113, 15, 117, 15, 
113, 15, 15, 113, 
113, 15, 15, 115, 
113, 15, 15, 117, 
113, 15, 15, 15, 
115, 113, 113, 113, 
115, 113, 113, 115, 
115, 113, 113, 117, 
115, 113, 113, 15, 
115, 113, 115, 113, 
115, 113, 115, 115, 
115, 113, 115, 117, 
115, 113, 115, 15, 
115, 113, 117, 113, 
115, 113, 117, 115, 
115, 113, 117, 117, 
115, 113, 117, 15, 
115, 113, 15, 113, 
115, 113, 15, 115, 
115, 113, 15, 117, 
115, 113, 15, 15, 
115, 115, 113, 113, 
115, 115, 113, 115, 
115, 115, 113, 117, 
115, 115, 113, 15, 
115, 115, 115, 113, 
115, 115, 115, 115, 
115, 115, 115, 117, 
115, 115, 115, 15, 
115, 115, 117, 113, 
115, 115, 117, 115, 
115, 115, 117, 117, 
115, 115, 117, 15, 
115, 115, 15, 113, 
115, 115, 15, 115, 
115, 115, 15, 117, 
115, 115, 15, 15, 
115, 117, 113, 113, 
115, 117, 113, 115, 
115, 117, 113, 117, 
115, 117, 113, 15, 
115, 117, 115, 113, 
115, 117, 115, 115, 
115, 117, 115, 117, 
115, 117, 115, 15, 
115, 117, 117, 113, 
115, 117, 117, 115, 
115, 117, 117, 117, 
115, 117, 117, 15, 
115, 117, 15, 113, 
115, 117, 15, 115, 
115, 117, 15, 117, 
115, 117, 15, 15, 
115, 15, 113, 113, 
115, 15, 113, 115, 
115, 15, 113, 117, 
115, 15, 113, 15, 
115, 15, 115, 113, 
115, 15, 115, 115, 
115, 15, 115, 117, 
115, 15, 115, 15, 
115, 15, 117, 113, 
115, 15, 117, 115, 
115, 15, 117, 117, 
115, 15, 117, 15, 
115, 15, 15, 113, 
115, 15, 15, 115, 
115, 15, 15, 117, 
115, 15, 15, 15, 
117, 113, 113, 113, 
117, 113, 113, 115, 
117, 113, 113, 117, 
117, 113, 113, 15, 
117, 113, 115, 113, 
117, 113, 115, 115, 
117, 113, 115, 117, 
117, 113, 115, 15, 
117, 113, 117, 113, 
117, 113, 117, 115, 
117, 113, 117, 117, 
117, 113, 117, 15, 
117, 113, 15, 113, 
117, 113, 15, 115, 
117, 113, 15, 117, 
117, 113, 15, 15, 
117, 115, 113, 113, 
117, 115, 113, 115, 
117, 115, 113, 117, 
117, 115, 113, 15, 
117, 115, 115, 113, 
117, 115, 115, 115, 
117, 115, 115, 117, 
117, 115, 115, 15, 
117, 115, 117, 113, 
117, 115, 117, 115, 
117, 115, 117, 117, 
117, 115, 117, 15, 
117, 115, 15, 113, 
117, 115, 15, 115, 
117, 115, 15, 117, 
117, 115, 15, 15, 
117, 117, 113, 113, 
117, 117, 113, 115, 
117, 117, 113, 117, 
117, 117, 113, 15, 
117, 117, 115, 113, 
117, 117, 115, 115, 
117, 117, 115, 117, 
117, 117, 115, 15, 
117, 117, 117, 113, 
117, 117, 117, 115, 
117, 117, 117, 117, 
117, 117, 117, 15, 
117, 117, 15, 113, 
117, 117, 15, 115, 
117, 117, 15, 117, 
117, 117, 15, 15, 
117, 15, 113, 113, 
117, 15, 113, 115, 
117, 15, 113, 117, 
117, 15, 113, 15, 
117, 15, 115, 113, 
117, 15, 115, 115, 
117, 15, 115, 117, 
117, 15, 115, 15, 
117, 15, 117, 113, 
117, 15, 117, 115, 
117, 15, 117, 117, 
117, 15, 117, 15, 
117, 15, 15, 113, 
117, 15, 15, 115, 
117, 15, 15, 117, 
117, 15, 15, 15, 
15, 113, 113, 113, 
15, 113, 113, 115, 
15, 113, 113, 117, 
15, 113, 113, 15, 
15, 113, 115, 113, 
15, 113, 115, 115, 
15, 113, 115, 117, 
15, 113, 115, 15, 
15, 113, 117, 113, 
15, 113, 117, 115, 
15, 113, 117, 117, 
15, 113, 117, 15, 
15, 113, 15, 113, 
15, 113, 15, 115, 
15, 113, 15, 117, 
15, 113, 15, 15, 
15, 115, 113, 113, 
15, 115, 113, 115, 
15, 115, 113, 117, 
15, 115, 113, 15, 
15, 115, 115, 113, 
15, 115, 115, 115, 
15, 115, 115, 117, 
15, 115, 115, 15, 
15, 115, 117, 113, 
15, 115, 117, 115, 
15, 115, 117, 117, 
15, 115, 117, 15, 
15, 115, 15, 113, 
15, 115, 15, 115, 
15, 115, 15, 117, 
15, 115, 15, 15, 
15, 117, 113, 113, 
15, 117, 113, 115, 
15, 117, 113, 117, 
15, 117, 113, 15, 
15, 117, 115, 113, 
15, 117, 115, 115, 
15, 117, 115, 117, 
15, 117, 115, 15, 
15, 117, 117, 113, 
15, 117, 117, 115, 
15, 117, 117, 117, 
15, 117, 117, 15, 
15, 117, 15, 113, 
15, 117, 15, 115, 
15, 117, 15, 117, 
15, 117, 15, 15, 
15, 15, 113, 113, 
15, 15, 113, 115, 
15, 15, 113, 117, 
15, 15, 113, 15, 
15, 15, 115, 113, 
15, 15, 115, 115, 
15, 15, 115, 117, 
15, 15, 115, 15, 
15, 15, 117, 113, 
15, 15, 117, 115, 
15, 15, 117, 117, 
15, 15, 117, 15, 
15, 15, 15, 113, 
15, 15, 15, 115, 
15, 15, 15, 117, 
15, 15, 15, 15

} ;	 
#line 4 "secondstep_macro.h"




 

#line 20 "secondstep_macro.h"

#line 29 "secondstep_macro.h"



#line 41 "secondstep_macro.h"
 
#line 53 "secondstep_macro.h"







const ushort HLMask[4][2]={
	0x3FC,0x3,
	0x3F0,0xF,
	0x3C0,0x3F,
	0x300,0xFF,
};
enum{
    HIGHT_MASK=0,
    LOW_MASK=1
};














#line 90 "secondstep_macro.h"









 

#line 109 "secondstep_macro.h"







#line 7 "SecondStep.h"

















 

class SecondStepBase:public DoubleBufferUshort{
    public:
        ushort cur_word;
        uint mask;
    	uint shift;
		uint   cnt_5;	
		ushort *word4; 	
		byte word5[5];	
		

        SecondStepBase(ushort*const data_ptr,const uint& size);
        
		virtual byte GetNext()=0;
		
		void WriteAnalog(const uint& num,const ushort&  val); 
		void WriteContact(const uint& num,const ushort& val); 
};

class SecondStep2POS:public SecondStepBase{
    public:
        SecondStep2POS(ushort*const data_ptr,const uint& size);
        virtual byte GetNext();
        
};

class SecondStep4POS:public SecondStepBase{
    public:
        SecondStep4POS(ushort* const data_ptr,const uint& size);
        virtual byte GetNext();
        
};


class BDCStreamAddr:public SecondStepBase{
	public:
		BDCStreamAddr(ushort* const data_ptr,const uint&size);
		virtual byte GetNext();
};
#line 2 "secondstep.cpp"

 
SecondStepBase::SecondStepBase(ushort*const data_ptr,const uint& size):
DoubleBufferUshort(data_ptr,size),mask(0){



 
}

void SecondStepBase::WriteAnalog(const uint& num,const ushort&  val){
	ushort& word=read[num];
	word&=0xFE00; 			
	word|=(val&0x1FF);    	
}
void SecondStepBase::WriteContact(const uint& num,const ushort& val){
	ushort& word=GetWriteWord(num);
	word&=0xFDFF; 			
	word|=((val&0x1)<<9);   
}

SecondStep2POS::SecondStep2POS(ushort*const data_ptr,const uint& size):SecondStepBase(data_ptr,size){}
inline byte SecondStep2POS::GetNext(){
 









 
}

SecondStep4POS::SecondStep4POS(ushort* const data_ptr,const uint& size)
:SecondStepBase(data_ptr,size){
	shift=0;cnt_5=1;
}
inline byte SecondStep4POS::GetNext(){
 







 
}

  
BDCStreamAddr::BDCStreamAddr(ushort* const data_ptr,const uint&size):SecondStepBase(data_ptr,size){}

inline byte BDCStreamAddr::GetNext(){










 
}

